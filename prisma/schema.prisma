generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                    String                  @unique
  username                 String                  @unique
  password                 String
  firstName                String?
  lastName                 String?
  avatar                   String?
  rank                     String?
  role                     String?
  game                     String?
  isPro                    Boolean                 @default(false)
  isOnline                 Boolean                 @default(false)
  lastSeen                 DateTime                @default(now())
  verified                 Boolean                 @default(false)
  bio                      String?
  discord                  String?
  steam                    String?
  timezone                 String?
  createdAt                DateTime                @default(now())
  id                       Int                     @id @default(autoincrement())
  languages                String[]
  sentMessages             ChatMessage[]           @relation("MessageSender")
  payments                 Payment[]
  reviewsReceived          Review[]                @relation("ReviewsReceived")
  reviewsGiven             Review[]                @relation("ReviewsGiven")
  clientSessions           Session[]               @relation("ClientSessions")
  proSessions              Session[]               @relation("ProTeammateSessions")
  authSessions             AuthSession[]
  queueEntries             QueueEntry[]
  tournamentParticipations TournamentParticipant[]
  // Favourite and block relationships
  favourites               UserFavourite[]         @relation("UserFavourites")
  favouritedBy             UserFavourite[]         @relation("FavouritedByUser")
  blockedUsers             UserBlock[]             @relation("UserBlocks")
  blockedBy                UserBlock[]             @relation("BlockedByUser")
}

model AuthSession {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model Session {
  game          String
  mode          String
  status        String        @default("Pending")
  startTime     DateTime
  endTime       DateTime?
  price         Float
  duration      Int?
  createdAt     DateTime      @default(now())
  id            Int           @id @default(autoincrement())
  clientId      Int
  proTeammateId Int?
  chatMessages  ChatMessage[] @relation("SessionMessages")
  payments      Payment[]
  reviews       Review[]
  client        User          @relation("ClientSessions", fields: [clientId], references: [id])
  proTeammate   User?         @relation("ProTeammateSessions", fields: [proTeammateId], references: [id])
}

model Review {
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  type       String?
  id         Int      @id @default(autoincrement())
  sessionId  Int
  reviewerId Int
  reviewedId Int
  reviewed   User     @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  reviewer   User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  session    Session  @relation(fields: [sessionId], references: [id])
}

model Payment {
  amount    Float
  method    String
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  sessionId Int?
  id        Int      @id @default(autoincrement())
  userId    Int
  session   Session? @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  content   String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  sessionId Int
  senderId  Int
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  session   Session  @relation("SessionMessages", fields: [sessionId], references: [id])
}

model Package {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  price       String
  description String
  features    String[]
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Tournament {
  id              String                  @id @default(cuid())
  name            String
  game            String
  prize           Float
  entryFee        Float
  maxParticipants Int
  status          String
  startDate       DateTime
  endDate         DateTime?
  region          String
  description     String?
  rules           String?
  createdAt       DateTime                @default(now())
  participants    TournamentParticipant[]

  @@map("tournaments")
}

model TournamentParticipant {
  id           String     @id @default(cuid())
  tournamentId String
  userId       Int
  teamName     String?
  joinedAt     DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model QueueEntry {
  id        Int      @id @default(autoincrement())
  userId    Int
  game      String
  mode      String   @default("duo")
  duration  Int
  price     Float
  status    String   @default("waiting")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("queue_entries")
}

model UserFavourite {
  id           Int      @id @default(autoincrement())
  userId       Int      // User who is favouriting
  favouriteId  Int      // User who is being favourited
  createdAt    DateTime @default(now())
  user         User     @relation("UserFavourites", fields: [userId], references: [id], onDelete: Cascade)
  favourite    User     @relation("FavouritedByUser", fields: [favouriteId], references: [id], onDelete: Cascade)

  @@unique([userId, favouriteId])
  @@map("user_favourites")
}

model UserBlock {
  id        Int      @id @default(autoincrement())
  userId    Int      // User who is blocking
  blockedId Int      // User who is being blocked
  createdAt DateTime @default(now())
  user      User     @relation("UserBlocks", fields: [userId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlockedByUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedId])
  @@map("user_blocks")
}
