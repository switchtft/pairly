// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  username        String        @unique
  // New profile fields from Claude
  firstName       String?
  lastName        String?
  avatar          String?
  bio             String?
  // Gaming information
  rank            String?
  game            String?
  role            String?
  isPro           Boolean       @default(false)
  verified        Boolean       @default(false)  // From Claude
  // New contact fields from Claude
  discord         String?
  steam           String?
  // Settings from Claude
  isOnline        Boolean       @default(false)
  timezone        String?
  languages       String[]      // Array of language codes
  lastSeen        DateTime      @default(now())  // From Claude
  
  // Relations
  authSessions    AuthSession[]   // Authentication sessions (from Claude)
  clientSessions  Session[]       @relation("ClientSessions")
  proSessions     Session[]       @relation("ProTeammateSessions")
  reviewsGiven    Review[]        @relation("ReviewsGiven")
  reviewsReceived Review[]        @relation("ReviewsReceived")
  payments        Payment[]
  sentMessages    ChatMessage[]   @relation("MessageSender")
  tournamentParticipations TournamentParticipant[]  // From Claude
  createdAt       DateTime        @default(now())
}

// New authentication session model from Claude
model AuthSession {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("auth_sessions")
}

model Session {
  id            Int           @id @default(autoincrement())
  client        User          @relation("ClientSessions", fields: [clientId], references: [id])
  clientId      Int
  proTeammate   User?         @relation("ProTeammateSessions", fields: [proTeammateId], references: [id])
  proTeammateId Int?
  game          String
  mode          String
  status        String        @default("Pending")
  startTime     DateTime      // Equivalent to Claude's scheduledAt
  endTime       DateTime?
  price         Float
  // New fields from Claude
  duration      Int?          // in minutes (optional since we have start/end times)
  
  // Relations
  reviews       Review[]
  payments      Payment[]
  chatMessages  ChatMessage[] @relation("SessionMessages")
  createdAt     DateTime      @default(now())
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String?
  // New field from Claude
  type       String?   // 'coaching', 'duo', 'tournament'
  
  reviewer   User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewerId Int
  reviewed   User     @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  reviewedId Int
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  Int
  createdAt  DateTime @default(now())
}

model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  amount    Float
  method    String
  status    String   @default("Pending")
  createdAt DateTime @default(now())
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  session   Session  @relation("SessionMessages", fields: [sessionId], references: [id])
  sessionId Int
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId  Int
  content   String
  createdAt DateTime @default(now())
}

model Package {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  price       String   // Ex: "$25"
  description String
  features    String[]
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

// New tournament models from Claude
model Tournament {
  id            String   @id @default(cuid())
  name          String
  game          String
  prize         Float
  entryFee      Float
  maxParticipants Int
  status        String   // 'upcoming', 'ongoing', 'completed'
  startDate     DateTime
  endDate       DateTime?
  region        String
  description   String?
  rules         String?
  createdAt     DateTime @default(now())
  participants  TournamentParticipant[]
  @@map("tournaments")
}

model TournamentParticipant {
  id           String @id @default(cuid())
  tournamentId String
  userId       Int
  teamName     String?
  joinedAt     DateTime @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}