generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email        String    @unique
  username     String    @unique
  password     String
  firstName    String?
  lastName     String?
  avatar       String?
  rank         String?
  role         String?
  game         String?
  isPro        Boolean   @default(false)
  isOnline     Boolean   @default(false)
  lastSeen     DateTime  @default(now())
  verified     Boolean   @default(false)
  bio          String?
  discord      String?
  steam        String?
  timezone     String?
  createdAt    DateTime  @default(now())
  id           Int       @id @default(autoincrement())
  languages    String[]

  accountLocked Boolean   @default(false)
  lockUntil     DateTime?

  sentMessages             ChatMessage[]           @relation("MessageSender")
  payments                 Payment[]               @relation("UserPayments")
  reviewsReceived          Review[]                @relation("ReviewsReceived")
  reviewsGiven             Review[]                @relation("ReviewsGiven")
  clientSessions           Session[]               @relation("ClientSessions")
  proSessions              Session[]               @relation("ProTeammateSessions")
  authSessions             AuthSession[]           @relation("AuthSessions")
  queueEntries             QueueEntry[]            @relation("QueueEntries")
  tournamentParticipations TournamentParticipant[] @relation("TournamentParticipants")
  duoPosts                 DuoPost[]               @relation("DuoPosts")
  
  // Favourite and block relationships
  favourites   UserFavourite[] @relation("UserFavourites")
  favouritedBy UserFavourite[] @relation("FavouritedByUser")
  blockedUsers UserBlock[]     @relation("UserBlocks")
  blockedBy    UserBlock[]     @relation("BlockedByUser")
}

model CSRFToken {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model AuthSession {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("AuthSessions", fields: [userId], references: [id], onDelete: Cascade) // Reverse relation to User
}

model Session {
  game          String
  mode          String
  status        String        @default("Pending")
  startTime     DateTime
  endTime       DateTime?
  price         Float
  duration      Int?
  createdAt     DateTime      @default(now())
  id            Int           @id @default(autoincrement())
  clientId      Int
  proTeammateId Int?
  chatMessages  ChatMessage[] @relation("SessionMessages")
  payments      Payment[]     @relation("SessionPayments")
  reviews       Review[]      @relation("SessionReviews")
  client        User          @relation("ClientSessions", fields: [clientId], references: [id])
  proTeammate   User?         @relation("ProTeammateSessions", fields: [proTeammateId], references: [id])
}

model Review {
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  type       String?
  id         Int      @id @default(autoincrement())
  sessionId  Int
  reviewerId Int
  reviewedId Int
  reviewed   User     @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  reviewer   User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  session    Session  @relation("SessionReviews", fields: [sessionId], references: [id]) // Reverse relation to Session
}

model Payment {
  amount    Float
  method    String
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  sessionId Int?
  id        Int      @id @default(autoincrement())
  userId    Int
  session   Session? @relation("SessionPayments", fields: [sessionId], references: [id]) // Reverse relation to Session
  user      User     @relation("UserPayments", fields: [userId], references: [id]) // Reverse relation to User
}

model ChatMessage {
  content   String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  sessionId Int
  senderId  Int
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  session   Session  @relation("SessionMessages", fields: [sessionId], references: [id])
}

model QueueEntry {
  id        Int      @id @default(autoincrement())
  userId    Int
  game      String
  mode      String   @default("duo")
  duration  Int
  price     Float
  status    String   @default("waiting")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("QueueEntries", fields: [userId], references: [id], onDelete: Cascade) // Reverse relation to User
}

model DuoPost {
  id           Int      @id @default(autoincrement())
  authorId     Int
  gameId       Int
  inGameName   String
  rank         String
  roles        String[]
  lookingFor   String[]
  champions    String[]
  message      String?
  discord      String?
  showDiscord  Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  views        Int      @default(0)

  author User @relation("DuoPosts", fields: [authorId], references: [id], onDelete: Cascade) // Reverse relation to User
  game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Game {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  roles     String[]
  ranks     String[]
  champions Champion[]
  posts     DuoPost[]
}

model Champion {
  id      Int     @id @default(autoincrement())
  name    String
  iconUrl String?
  gameId  Int
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([name, gameId])
}

model Tournament {
  id              String                  @id @default(cuid())
  name            String
  game            String
  prize           Float
  entryFee        Float
  maxParticipants Int
  status          String
  startDate       DateTime
  endDate         DateTime?
  region          String
  description     String?
  rules           String?
  createdAt       DateTime                @default(now())
  participants    TournamentParticipant[] @relation("TournamentParticipants")
}

model TournamentParticipant {
  id           String     @id @default(cuid())
  tournamentId String
  userId       Int
  teamName     String?
  joinedAt     DateTime   @default(now())
  tournament   Tournament @relation("TournamentParticipants", fields: [tournamentId], references: [id]) // Reverse relation to Tournament
  user         User       @relation("TournamentParticipants", fields: [userId], references: [id]) // Reverse relation to User

  @@unique([tournamentId, userId])
}

model UserFavourite {
  id          Int      @id @default(autoincrement())
  userId      Int // User who is favouriting
  favouriteId Int // User who is being favourited
  createdAt   DateTime @default(now())
  user        User     @relation("UserFavourites", fields: [userId], references: [id], onDelete: Cascade) // Reverse relation to User
  favourite   User     @relation("FavouritedByUser", fields: [favouriteId], references: [id], onDelete: Cascade)

  @@unique([userId, favouriteId])
}

model RateLimit {
  identifier String   @id
  count      Int
  expiresAt  DateTime
}

model UserBlock {
  id        Int      @id @default(autoincrement())
  userId    Int // User who is blocking
  blockedId Int // User who is being blocked
  createdAt DateTime @default(now())
  user      User     @relation("UserBlocks", fields: [userId], references: [id], onDelete: Cascade) // Reverse relation to User
  blocked   User     @relation("BlockedByUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedId])
}